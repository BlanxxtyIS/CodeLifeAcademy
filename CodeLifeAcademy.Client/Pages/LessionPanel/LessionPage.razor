@page "/lesson/{LessonId:guid}"
@inject HttpClient _http
@inject NavigationManager _navManager

@if (Lesson is null)
{
    <p>Загрузка...</p>
}
else
{
    <div class="lesson-container">
        <h1>@Lesson.Title</h1>
        <div class="lesson-content">@((MarkupString)Lesson.Content)</div>

        <div class="lesson-navigation">
            <button class="btn btn-primary" @onclick="GoToNextLesson">
                Следующий урок
            </button>
        </div>
    </div>
}

@code {
    [Parameter] public Guid LessonId { get; set; }
    private Lession? Lesson;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Lesson = await _http.GetFromJsonAsync<Lession>($"/lessions/{LessonId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка загрузки урока: " + ex.Message);
        }
    }

    private void GoToNextLesson()
    {
        // Здесь должна быть логика получения ID следующего урока
        // Например:
        var nextLessonId = GetNextLessonId(); // Реализуйте этот метод
        _navManager.NavigateTo($"/lesson/{nextLessonId}");
    }

    private Guid GetNextLessonId()
    {
        // Заглушка - реализуйте получение ID следующего урока
        // Можно через API или из списка уроков
        return Guid.NewGuid();
    }
}