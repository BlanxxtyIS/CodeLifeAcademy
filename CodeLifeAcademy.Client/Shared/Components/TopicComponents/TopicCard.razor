@inject HttpClient _http

<div class="card">
    <div class="card-details">
        <p class="text-title">@CurrentTopic?.Title</p>
        <p class="text-body">@CurrentTopic?.Description</p>
    </div>
    @if (_lessions?.Count > 0)
    {
        <button class="card-button" @onclick=ShowLessonsButton>
            @_showLessionButtonText
        </button>
    }
</div>

@if (_showLession)
{
    <LessionsCard Lessions="_lessions" />
}

@code {
    [Parameter, EditorRequired]
    public Topic? CurrentTopic { get; set; }

    private List<Lession>? _lessions;

    private bool _showLession;
    private string _showLessionButtonText = string.Empty;

    private void ShowLessonsButton()
    {
        _showLession = !_showLession;
        _showLessionButtonText = _showLession ? "Скрыть" : "Показать";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _lessions = await _http.GetFromJsonAsync<List<Lession>>("/lessions");
            if (_lessions != null && CurrentTopic != null) {
                _lessions = _lessions.Where(l => l.TopicId == CurrentTopic.Id).ToList();
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Ошибка при загрузке тем курса {ex.Message}");
        }
    }
}